
public class programmers {

	public static void main(String[] args) {

//		int[] progresses = new int[6];
//		progresses[0] = 95;
//		progresses[1] = 90;
//		progresses[2] = 99;
//		progresses[3] = 99;
//		progresses[4] = 80;
//		progresses[5] = 99;
//		int[] speeds = new int[6];
//		speeds[0] = 1;
//		speeds[1] = 1;
//		speeds[2] = 1;
//		speeds[3] = 1;
//		speeds[4] = 1;
//		speeds[5] = 1;
		int[] progresses = new int[3];
		progresses[0] = 93;
		progresses[1] = 30;
		progresses[2] = 55;
		int[] speeds = new int[3];
		speeds[0] = 1;
		speeds[1] = 30;
		speeds[2] = 5;
		int[] answer = new int[3];
		
		
		int[] day = new int[3];
		int dayCount = 0;
		// 선행기능이 완성되어야함
		
		
		// 각각의 작업마다 걸리는 날짜 구하기
		for(int i=0; i<progresses.length; i++) {
			while(true) {
				progresses[i] = progresses[i] + speeds[i];
				dayCount++;
				if(progresses[i] >= 100) {
					day[i] = dayCount;
					dayCount = 0;
					break;
				}
			}
		}
		
		// 날짜 확인용
		for(int i=0; i<day.length; i++) {
			System.out.println(day[i]);
		}
		System.out.println("-----각각의 날짜 구하기 완료--------------");
		
		
		// jobCount는 이제 같이끝나는 작업수를 구해주기 위함
		// answerCount는 작업을 이제 answer[]배열에 저장해주기 위함
		int jobCount = 1;
		int answerCount = 0;
		
		// 내 공식
		for(int i=0; i<day.length; i++) {
			for(int j=i+1; j<day.length; j++) {
				if(day[i] >= day[j]) {
					jobCount++;
				}else {
					answer[answerCount] = jobCount;
					i=j-1;
					jobCount = 1;
					answerCount++;
					System.out.println("발동!");
					break;
				}
			}
			
			// 마지막번째 작업수를 넣어주기 위함
			if(i == day.length-1) {
				answer[answerCount] = jobCount;
			}
		}
			
		// 작업배열(answer[])에 잘들어갔나 확인
		for(int i=0; i<answer.length; i++) {
			System.out.println(answer[i]);
		}
		
		
	}
}
