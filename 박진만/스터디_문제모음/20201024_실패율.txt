import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

class Solution {
    public int[] solution(int N, int[] stages) {
        int[] answer = new int[N];
		double sLengs = stages.length;
		double cnt = 0.0;
		double[] aLengs = new double[N];
		int rCnt = 0;
		
		Map<Integer, Double> map = new HashMap<>();
		
		//스테이지별로 실패율을 구하는 반복
		for(int j=1; j < N+1; j++) {
			cnt = 0;
			
			//각 단계별 스테이지를 통과하지 못한 수를 확인한다.
			for(int i=0; i < stages.length; i++) {
				/*System.out.println(stages[i]);*/
				if(stages[i] == j) {
					cnt++;
				}
			}
			
			//map에 담아서 각 실패율이 몇 스테이지인지 설정한다.
			if(cnt == 0 && sLengs == 0) {
				map.put(j-1, 0.0);
				aLengs[j-1] = 0.0;
			} else {
				map.put(j-1, cnt/sLengs);
				aLengs[j-1] = cnt/sLengs;
			}
			sLengs = sLengs - cnt;
		}
		
		//오름차순으로 정렬
		Arrays.sort(aLengs);
		double emp = -1;
		for(int i=aLengs.length-1; i >= 0; i--) {
			for(int j=0; j < map.size(); j++) {
				if(aLengs[i] == map.get(j)) {
					answer[rCnt] = j+1;
					map.put(j, -1.1);
					break;
				}
			}
			
			rCnt++;
		}
		
  		return answer;
    }
}